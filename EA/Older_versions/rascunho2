            if h['first_currency'] == 'eur':
                if 0 > data[h['first_currency']].iloc[i] > -(data[h['first_currency']].std()*2) and 0 < data[h['second_currency']].iloc[i] < (data[h['second_currency']].std()*2) and  h['buy']:
                    if not  h['sell']:
                        balance_backtest = finance_calculation(balance_backtest,saldo_inicial=h['sell_price'],saldo_final=data[h['symbol']].iloc[i])
                        list_backtest.append(balance_backtest)
                        h['buy_price'] = data[h['symbol']].iloc[i]
                        h['sell_price'] = 0
                        h['sell'] = True
                        h['buy'] = False
                    else:
                        h['buy_price'] = data[h['symbol']].iloc[i]
                        h['buy'] = False
                elif 0 < data[h['first_currency']].iloc[i] < (data[h['first_currency']].std()*2) and 0 > data[h['second_currency']].iloc[i] > -(data[h['second_currency']].std()*2) and h['sell']:
                    if not h['buy']:
                        balance_backtest = finance_calculation(balance_backtest,saldo_final=data[h['symbol']].iloc[i],saldo_inicial=h['buy_price'],compra=True)
                        list_backtest.append(balance_backtest)
                        h['sell_price'] = data[h['symbol']].iloc[i]
                        h['buy_price'] = 0
                        h['buy'] = True
                        h['sell'] = False
                    else:
                        h['sell_price'] = data[h['symbol']].iloc[i]
                        h['sell'] = False
            elif not h['first_currency'] == 'eur':
                if 0 > data[h['first_currency']].iloc[i] > -(data[h['first_currency']].std()*2) and 0 < data[h['second_currency']].iloc[i] < (data[h['second_currency']].std()*2) and  h['buy']:
                    if not  h['sell']:
                        balance_backtest = finance_calculation(balance_backtest,saldo_inicial=h['sell_price'],saldo_final=data[h['symbol']].iloc[i],eur=False,preco_eur=data[h['preco_eur']].iloc[i])
                        list_backtest.append(balance_backtest)
                        h['buy_price'] = data[h['symbol']].iloc[i]
                        h['sell_price'] = 0
                        h['sell'] = True
                        h['buy'] = False
                    else:
                        h['buy_price'] = data[h['symbol']].iloc[i]
                        h['buy'] = False
                elif 0 < data[h['first_currency']].iloc[i] < (data[h['first_currency']].std()*2) and 0 > data[h['second_currency']].iloc[i] > -(data[h['second_currency']].std()*2) and h['sell']:
                    if not h['buy']:
                        balance_backtest = finance_calculation(balance_backtest,saldo_final=data[h['symbol']].iloc[i],saldo_inicial=h['buy_price'],compra=True,eur=False,preco_eur=data[h['preco_eur']].iloc[i])
                        list_backtest.append(balance_backtest)
                        h['sell_price'] = data[h['symbol']].iloc[i]
                        h['buy_price'] = 0
                        h['buy'] = True
                        h['sell'] = False
                    else:
                        h['sell_price'] = data[h['symbol']].iloc[i]
                        h['sell'] = False

def finance_calculation(balance, saldo_inicial, saldo_final, eur=True, preco_eur=0, compra=False):
    risco = 0.01
    alavancagem = 100
    lot = round(balance*risco*alavancagem/100_000,2) * 100_000
    if eur:
        if compra:
            tot = balance + (saldo_final * lot) - (saldo_inicial * lot)
            return tot
        if not compra:
            tot = balance + (saldo_inicial * lot) - (saldo_final * lot)
            return tot
    if not eur:
        novo_lot = lot * preco_eur
        if compra:
            tot = (saldo_final * novo_lot) - (saldo_inicial * novo_lot)
            tot2 = balance + (tot/preco_eur)
            return tot2
        if not compra:
            tot = (saldo_inicial * novo_lot) - (saldo_final * novo_lot)
            tot2 = balance + (tot/preco_eur)
            return tot2
