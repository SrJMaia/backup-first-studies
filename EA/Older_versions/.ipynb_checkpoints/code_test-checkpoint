def new_backtest(initial,final):

    initial_balance = 1_000

    dt_results = pd.DataFrame()

    for i in range(initial,final):

        clear_output(wait=True)
        print(f'{i}/{final-1}')

        for j in range(1,31):

            risk = 0.01
            leverage = 100
            balance_backtest = 1_000
            list_backtest = [balance_backtest]

            eur_best_time = i
            flag_close_bought_position_eurusd, flag_close_sell_position_eurusd = False, False
            tk_eurusd, tk_sum_eurusd, price_bought_eurusd, price_sold_eurusd = 0, 0, 0, 0
            flag_buy_eurusd, flag_sell_eurusd = True, True

            tk_eurusd = j/10_000

            for k in range(len(data)):
                # EUR
            #EURUSD
                if data['eur'].iloc[i] < -eur_best_time and data['usd'].iloc[i] > eur_best_time and flag_buy_eurusd:
                    price_bought_eurusd = data['EURUSD_Close'].iloc[i]
                    tk_bought_sum_eurusd = price_bought_eurusd + tk_eurusd
                    flag_close_bought_position_eurusd = True
                    flag_buy_eurusd = False
                elif flag_close_bought_position_eurusd and data['EURUSD_High'].iloc[i] >= tk_bought_sum_eurusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_bought_eurusd,tk_bought_sum_eurusd)
                    list_backtest.append(balance_backtest)
                    price_bought_eurusd = 0
                    tk_bought_sum_eurusd = 0
                    flag_buy_eurusd = True
                elif data['eur'].iloc[i] > eur_best_time and data['usd'].iloc[i] < -eur_best_time and flag_sell_eurusd:
                    price_sold_eurusd = data['EURUSD_Close'].iloc[i]
                    tk_sell_sum_eurusd = price_sold_eurusd - tk_eurusd
                    flag_close_sell_position_eurusd = True
                    flag_sell_eurusd = False
                elif flag_close_sell_position_eurusd and data['EURUSD_Low'].iloc[i] <= tk_sell_sum_eurusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,tk_sell_sum_eurusd,price_sold_eurusd)
                    list_backtest.append(balance_backtest)
                    price_sold_eurusd = 0
                    tk_sell_sum_eurusd = 0
                    flag_sell_eurusd = True

            if balance_backtest > initial_balance:
                dt_results[f'{i}_{j}'] = pd.Series(list_backtest)
            list_backtest.clear()
        if i == final-1:
            return dt_results
