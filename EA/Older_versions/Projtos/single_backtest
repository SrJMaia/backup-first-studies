def test_backtest2(test_number):

    balance_backtest = 1_000
    risk = 0.01
    leverage = 100
    list_backtest = [balance_backtest]

    # EUR
    eurusd_besttime = test_number
    eurgbp_besttime = test_number
    eurchf_besttime = test_number
    eurnzd_besttime = test_number
    euraud_besttime = test_number
    eurcad_besttime = test_number
    eurjpy_besttime = test_number
    flag_buy_eurusd, flag_sell_eurusd = True, True
    flag_buy_eurgbp, flag_sell_eurgbp = True, True
    flag_buy_eurchf, flag_sell_eurchf = True, True
    flag_buy_eurnzd, flag_sell_eurnzd = True, True
    flag_buy_euraud, flag_sell_euraud = True, True
    flag_buy_eurcad, flag_sell_eurcad = True, True
    flag_buy_eurjpy, flag_sell_eurjpy = True, True
    price_bought_eurusd, price_sold_eurusd = 0.0, 0.0
    price_bought_eurgbp, price_sold_eurgbp = 0.0, 0.0
    price_bought_eurchf, price_sold_eurchf = 0.0, 0.0
    price_bought_eurnzd, price_sold_eurnzd = 0.0, 0.0
    price_bought_euraud, price_sold_euraud = 0.0, 0.0
    price_bought_eurcad, price_sold_eurcad = 0.0, 0.0
    price_bought_eurjpy, price_sold_eurjpy = 0.0, 0.0

    # USD
    usdcad_besttime = test_number
    gbpusd_besttime = test_number
    usdchf_besttime = test_number
    audusd_besttime = test_number
    nzdusd_besttime = test_number
    usdjpy_besttime = test_number
    flag_buy_gbpusd, flag_sell_gbpusd = True, True
    flag_buy_usdchf, flag_sell_usdchf = True, True
    flag_buy_usdjpy, flag_sell_usdjpy = True, True
    flag_buy_audusd, flag_sell_audusd = True, True
    flag_buy_nzdusd, flag_sell_nzdusd = True, True
    flag_buy_usdcad, flag_sell_usdcad = True, True
    price_bought_gbpusd, price_sold_gbpusd = 0.0, 0.0
    price_bought_usdchf, price_sold_usdchf = 0.0, 0.0
    price_bought_usdjpy, price_sold_usdjpy = 0.0, 0.0
    price_bought_audusd, price_sold_audusd = 0.0, 0.0
    price_bought_nzdusd, price_sold_nzdusd = 0.0, 0.0
    price_bought_usdcad, price_sold_usdcad = 0.0, 0.0

    # GBP
    gbpaud_besttime = test_number
    gbpchf_besttime = test_number
    gbpjpy_besttime = test_number
    gbpcad_besttime = test_number
    gbpnzd_besttime = test_number
    flag_buy_gbpaud, flag_sell_gbpaud = True, True
    flag_buy_gbpchf, flag_sell_gbpchf = True, True
    flag_buy_gbpjpy, flag_sell_gbpjpy = True, True
    flag_buy_gbpcad, flag_sell_gbpcad = True, True
    flag_buy_gbpnzd, flag_sell_gbpnzd = True, True
    price_bought_gbpaud, price_sold_gbpaud = 0.0, 0.0
    price_bought_gbpchf, price_sold_gbpchf = 0.0, 0.0
    price_bought_gbpjpy, price_sold_gbpjpy = 0.0, 0.0
    price_bought_gbpcad, price_sold_gbpcad = 0.0, 0.0
    price_bought_gbpnzd, price_sold_gbpnzd = 0.0, 0.0

    # JPY
    audjpy_besttime = test_number
    cadjpy_besttime = test_number
    chfjpy_besttime = test_number
    nzdjpy_besttime = test_number
    flag_buy_audjpy, flag_sell_audjpy = True, True
    flag_buy_cadjpy, flag_sell_cadjpy = True, True
    flag_buy_chfjpy, flag_sell_chfjpy = True, True
    flag_buy_nzdjpy, flag_sell_nzdjpy = True, True
    price_bought_audjpy, price_sold_audjpy = 0.0, 0.0
    price_bought_cadjpy, price_sold_cadjpy = 0.0, 0.0
    price_bought_chfjpy, price_sold_chfjpy = 0.0, 0.0
    price_bought_nzdjpy, price_sold_nzdjpy = 0.0, 0.0

    # CHF
    audchf_besttime = test_number
    cadchf_besttime = test_number
    nzdchf_besttime = test_number
    flag_buy_audchf, flag_sell_audchf = True, True
    flag_buy_cadchf, flag_sell_cadchf = True, True
    flag_buy_nzdchf, flag_sell_nzdchf = True, True
    price_bought_audchf, price_sold_audchf = 0.0, 0.0
    price_bought_cadchf, price_sold_cadchf = 0.0, 0.0
    price_bought_nzdchf, price_sold_nzdchf = 0.0, 0.0

    # NZD
    audnzd_besttime = test_number
    nzdcad_besttime = test_number
    flag_buy_audnzd, flag_sell_audnzd = True, True
    flag_buy_nzdcad, flag_sell_nzdcad = True, True
    price_bought_audnzd, price_sold_audnzd = 0.0, 0.0
    price_bought_nzdcad, price_sold_nzdcad = 0.0, 0.0

    # AUD
    audcad_besttime = test_number
    flag_buy_audcad, flag_sell_audcad = True, True
    price_bought_audcad, price_sold_audcad = 0.0, 0.0

    for i in range(len(data)):
        # EUR
        if data['eur'].iloc[i] < -eurusd_besttime and data['usd'].iloc[i] > eurusd_besttime and flag_buy_eurusd:
            if flag_sell_eurusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurusd,data['EURUSD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_eurusd = True
                price_sold_eurusd = 0
                flag_buy_eurusd = False
                price_bought_eurusd = data['EURUSD'].iloc[i]
            else:
                flag_buy_eurusd = False
                price_bought_eurusd = data['EURUSD'].iloc[i]
        elif data['eur'].iloc[i] > eurusd_besttime and data['usd'].iloc[i] < -eurusd_besttime and flag_sell_eurusd:
            if flag_buy_eurusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURUSD'].iloc[i],price_bought_eurusd)
                list_backtest.append(balance_backtest)
                flag_buy_eurusd = True
                price_bought_eurusd = 0
                flag_sell_eurusd = False
                price_sold_eurusd = data['EURUSD'].iloc[i]
            else:
                flag_sell_eurusd = False
                price_sold_eurusd = data['EURUSD'].iloc[i]
        elif data['eur'].iloc[i] < -eurgbp_besttime and data['gbp'].iloc[i] > eurgbp_besttime and flag_buy_eurgbp:
            if flag_sell_eurgbp == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurgbp,data['EURGBP'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_eurgbp = True
                price_sold_eurgbp = 0
                flag_buy_eurgbp = False
                price_bought_eurgbp = data['EURGBP'].iloc[i]
            else:
                flag_buy_eurgbp = False
                price_bought_eurgbp = data['EURGBP'].iloc[i]
        elif data['eur'].iloc[i] > eurgbp_besttime and data['gbp'].iloc[i] < -eurgbp_besttime and flag_sell_eurgbp:
            if flag_buy_eurgbp == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURGBP'].iloc[i],price_bought_eurgbp)
                list_backtest.append(balance_backtest)
                flag_buy_eurgbp = True
                price_bought_eurgbp = 0
                flag_sell_eurgbp = False
                price_sold_eurgbp = data['EURGBP'].iloc[i]
            else:
                flag_sell_eurgbp = False
                price_sold_eurgbp = data['EURGBP'].iloc[i]
        elif data['eur'].iloc[i] < -eurchf_besttime and data['chf'].iloc[i] > eurchf_besttime and flag_buy_eurchf:
            if flag_sell_eurchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurchf,data['EURCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_eurchf = True
                price_sold_eurchf = 0
                flag_buy_eurchf = False
                price_bought_eurchf = data['EURCHF'].iloc[i]
            else:
                flag_buy_eurchf = False
                price_bought_eurchf = data['EURCHF'].iloc[i]
        elif data['eur'].iloc[i] > eurchf_besttime and data['chf'].iloc[i] < -eurchf_besttime and flag_sell_eurchf:
            if flag_buy_eurchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURCHF'].iloc[i],price_bought_eurchf)
                list_backtest.append(balance_backtest)
                flag_buy_eurchf = True
                price_bought_eurchf = 0
                flag_sell_eurchf = False
                price_sold_eurchf = data['EURCHF'].iloc[i]
            else:
                flag_sell_eurchf = False
                price_sold_eurchf = data['EURCHF'].iloc[i]
        elif data['eur'].iloc[i] < -eurnzd_besttime and data['nzd'].iloc[i] > eurnzd_besttime and flag_buy_eurnzd:
            if flag_sell_eurnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurnzd,data['EURNZD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_eurnzd = True
                price_sold_eurnzd = 0
                flag_buy_eurnzd = False
                price_bought_eurnzd = data['EURNZD'].iloc[i]
            else:
                flag_buy_eurnzd = False
                price_bought_eurnzd = data['EURNZD'].iloc[i]
        elif data['eur'].iloc[i] > eurnzd_besttime and data['nzd'].iloc[i] < -eurnzd_besttime and flag_sell_eurnzd:
            if flag_buy_eurnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURNZD'].iloc[i],price_bought_eurnzd)
                list_backtest.append(balance_backtest)
                flag_buy_eurnzd = True
                price_bought_eurnzd = 0
                flag_sell_eurnzd = False
                price_sold_eurnzd = data['EURNZD'].iloc[i]
            else:
                flag_sell_eurnzd = False
                price_sold_eurnzd = data['EURNZD'].iloc[i]
        elif data['eur'].iloc[i] < -euraud_besttime and data['aud'].iloc[i] > euraud_besttime and flag_buy_euraud:
            if flag_sell_euraud == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_euraud,data['EURAUD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_euraud = True
                price_sold_euraud = 0
                flag_buy_euraud = False
                price_bought_euraud = data['EURAUD'].iloc[i]
            else:
                flag_buy_euraud = False
                price_bought_euraud = data['EURAUD'].iloc[i]
        elif data['eur'].iloc[i] > euraud_besttime and data['aud'].iloc[i] < -euraud_besttime and flag_sell_euraud:
            if flag_buy_euraud == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURAUD'].iloc[i],price_bought_euraud)
                list_backtest.append(balance_backtest)
                flag_buy_euraud = True
                price_bought_euraud = 0
                flag_sell_euraud = False
                price_sold_euraud = data['EURAUD'].iloc[i]
            else:
                flag_sell_euraud = False
                price_sold_euraud = data['EURAUD'].iloc[i]
        elif data['eur'].iloc[i] < -eurcad_besttime and data['cad'].iloc[i] > eurcad_besttime and flag_buy_eurcad:
            if flag_sell_eurcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurcad,data['EURCAD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_eurcad = True
                price_sold_eurcad = 0
                flag_buy_eurcad = False
                price_bought_eurcad = data['EURCAD'].iloc[i]
            else:
                flag_buy_eurcad = False
                price_bought_eurcad = data['EURCAD'].iloc[i]
        elif data['eur'].iloc[i] > eurcad_besttime and data['cad'].iloc[i] < -eurcad_besttime and flag_sell_eurcad:
            if flag_buy_eurcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURCAD'].iloc[i],price_bought_eurcad)
                list_backtest.append(balance_backtest)
                flag_buy_eurcad = True
                price_bought_eurcad = 0
                flag_sell_eurcad = False
                price_sold_eurcad = data['EURCAD'].iloc[i]
            else:
                flag_sell_eurcad = False
                price_sold_eurcad = data['EURCAD'].iloc[i]
        elif data['eur'].iloc[i] < -eurjpy_besttime and data['jpy'].iloc[i] > eurjpy_besttime and flag_buy_eurjpy:
            if flag_sell_eurjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurjpy,data['EURJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_eurjpy = True
                price_sold_eurjpy = 0
                flag_buy_eurjpy = False
                price_bought_eurjpy = data['EURJPY'].iloc[i]
            else:
                flag_buy_eurjpy = False
                price_bought_eurjpy = data['EURJPY'].iloc[i]
        elif data['eur'].iloc[i] > eurjpy_besttime and data['jpy'].iloc[i] < -eurjpy_besttime and flag_sell_eurjpy:
            if flag_buy_eurjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURJPY'].iloc[i],price_bought_eurjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_eurjpy = True
                price_bought_eurjpy = 0
                flag_sell_eurjpy = False
                price_sold_eurjpy = data['EURJPY'].iloc[i]
            else:
                flag_sell_eurjpy = False
                price_sold_eurjpy = data['EURJPY'].iloc[i]
       # USD
        elif data['gbp'].iloc[i] < -gbpusd_besttime and data['usd'].iloc[i] > gbpusd_besttime and flag_buy_gbpusd:
            if flag_sell_gbpusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpusd,data['GBPUSD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_gbpusd = True
                price_sold_gbpusd = 0
                flag_buy_gbpusd = False
                price_bought_gbpusd = data['GBPUSD'].iloc[i]
            else:
                flag_buy_gbpusd = False
                price_bought_gbpusd = data['GBPUSD'].iloc[i]
        elif data['gbp'].iloc[i] > gbpusd_besttime and data['usd'].iloc[i] < -gbpusd_besttime and flag_sell_gbpusd:
            if flag_buy_gbpusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPUSD'].iloc[i],price_bought_gbpusd)
                list_backtest.append(balance_backtest)
                flag_buy_gbpusd = True
                price_bought_gbpusd = 0
                flag_sell_gbpusd = False
                price_sold_gbpusd = data['GBPUSD'].iloc[i]
            else:
                flag_sell_gbpusd = False
                price_sold_gbpusd = data['GBPUSD'].iloc[i]
        elif data['usd'].iloc[i] < -usdchf_besttime and data['chf'].iloc[i] > usdchf_besttime and flag_buy_usdchf:
            if flag_sell_usdchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdchf,data['USDCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_usdchf = True
                price_sold_usdchf = 0
                flag_buy_usdchf = False
                price_bought_usdchf = data['USDCHF'].iloc[i]
            else:
                flag_buy_usdchf = False
                price_bought_usdchf = data['USDCHF'].iloc[i]
        elif data['usd'].iloc[i] > usdchf_besttime and data['chf'].iloc[i] < -usdchf_besttime and flag_sell_usdchf:
            if flag_buy_usdchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDCHF'].iloc[i],price_bought_usdchf)
                list_backtest.append(balance_backtest)
                flag_buy_usdchf = True
                price_bought_usdchf = 0
                flag_sell_usdchf = False
                price_sold_usdchf = data['USDCHF'].iloc[i]
            else:
                flag_sell_usdchf = False
                price_sold_usdchf = data['USDCHF'].iloc[i]
        elif data['usd'].iloc[i] < -usdjpy_besttime and data['jpy'].iloc[i] > usdjpy_besttime and flag_buy_usdjpy:
            if flag_sell_usdjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdjpy,data['USDJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_usdjpy = True
                price_sold_usdjpy = 0
                flag_buy_usdjpy = False
                price_bought_usdjpy = data['USDJPY'].iloc[i]
            else:
                flag_buy_usdjpy = False
                price_bought_usdjpy = data['USDJPY'].iloc[i]
        elif data['usd'].iloc[i] > usdjpy_besttime and data['jpy'].iloc[i] < -usdjpy_besttime and flag_sell_usdjpy:
            if flag_buy_usdjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDJPY'].iloc[i],price_bought_usdjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_usdjpy = True
                price_bought_usdjpy = 0
                flag_sell_usdjpy = False
                price_sold_usdjpy = data['USDJPY'].iloc[i]
            else:
                flag_sell_usdjpy = False
                price_sold_usdjpy = data['USDJPY'].iloc[i]
        elif data['aud'].iloc[i] < -audusd_besttime and data['usd'].iloc[i] > audusd_besttime and flag_buy_audusd:
            if flag_sell_audusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audusd,data['AUDUSD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_audusd = True
                price_sold_audusd = 0
                flag_buy_audusd = False
                price_bought_audusd = data['AUDUSD'].iloc[i]
            else:
                flag_buy_audusd = False
                price_bought_audusd = data['AUDUSD'].iloc[i]
        elif data['aud'].iloc[i] > audusd_besttime and data['usd'].iloc[i] < -audusd_besttime and flag_sell_audusd:
            if flag_buy_audusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDUSD'].iloc[i],price_bought_audusd)
                list_backtest.append(balance_backtest)
                flag_buy_audusd = True
                price_bought_audusd = 0
                flag_sell_audusd = False
                price_sold_audusd = data['AUDUSD'].iloc[i]
            else:
                flag_sell_audusd = False
                price_sold_audusd = data['AUDUSD'].iloc[i]
        elif data['nzd'].iloc[i] < -nzdusd_besttime and data['usd'].iloc[i] > nzdusd_besttime and flag_buy_nzdusd:
            if flag_sell_nzdusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdusd,data['NZDUSD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_nzdusd = True
                price_sold_nzdusd = 0
                flag_buy_nzdusd = False
                price_bought_nzdusd = data['NZDUSD'].iloc[i]
            else:
                flag_buy_nzdusd = False
                price_bought_nzdusd = data['NZDUSD'].iloc[i]
        elif data['nzd'].iloc[i] > nzdusd_besttime and data['usd'].iloc[i] < -nzdusd_besttime and flag_sell_nzdusd:
            if flag_buy_nzdusd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDUSD'].iloc[i],price_bought_nzdusd)
                list_backtest.append(balance_backtest)
                flag_buy_nzdusd = True
                price_bought_nzdusd = 0
                flag_sell_nzdusd = False
                price_sold_nzdusd = data['NZDUSD'].iloc[i]
            else:
                flag_sell_nzdusd = False
                price_sold_nzdusd = data['NZDUSD'].iloc[i]
        elif data['usd'].iloc[i] < -usdcad_besttime and data['cad'].iloc[i] > usdcad_besttime and flag_buy_usdcad:
            if flag_sell_usdcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdcad,data['USDCAD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_usdcad = True
                price_sold_usdcad = 0
                flag_buy_usdcad = False
                price_bought_usdcad = data['USDCAD'].iloc[i]
            else:
                flag_buy_usdcad = False
                price_bought_usdcad = data['USDCAD'].iloc[i]
        elif data['usd'].iloc[i] > usdcad_besttime and data['cad'].iloc[i] < -usdcad_besttime and flag_sell_usdcad:
            if flag_buy_usdcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDCAD'].iloc[i],price_bought_usdcad)
                list_backtest.append(balance_backtest)
                flag_buy_usdcad = True
                price_bought_usdcad = 0
                flag_sell_usdcad = False
                price_sold_usdcad = data['USDCAD'].iloc[i]
            else:
                flag_sell_usdcad = False
                price_sold_usdcad = data['USDCAD'].iloc[i]
        # GBP
        elif data['gbp'].iloc[i] < -gbpaud_besttime and data['aud'].iloc[i] > gbpaud_besttime and flag_buy_gbpaud:
            if flag_sell_gbpaud == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpaud,data['GBPAUD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_gbpaud = True
                price_sold_gbpaud = 0
                flag_buy_gbpaud = False
                price_bought_gbpaud = data['GBPAUD'].iloc[i]
            else:
                flag_buy_gbpaud = False
                price_bought_gbpaud = data['GBPAUD'].iloc[i]
        elif data['gbp'].iloc[i] > gbpaud_besttime and data['aud'].iloc[i] < -gbpaud_besttime and flag_sell_gbpaud:
            if flag_buy_gbpaud == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPAUD'].iloc[i],price_bought_gbpaud)
                list_backtest.append(balance_backtest)
                flag_buy_gbpaud = True
                price_bought_gbpaud = 0
                flag_sell_gbpaud = False
                price_sold_gbpaud = data['GBPAUD'].iloc[i]
            else:
                flag_sell_gbpaud = False
                price_sold_gbpaud = data['GBPAUD'].iloc[i]
        elif data['gbp'].iloc[i] < -gbpchf_besttime and data['chf'].iloc[i] > gbpchf_besttime and flag_buy_gbpchf:
            if flag_sell_gbpchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpchf,data['GBPCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_gbpchf = True
                price_sold_gbpchf = 0
                flag_buy_gbpchf = False
                price_bought_gbpchf = data['GBPCHF'].iloc[i]
            else:
                flag_buy_gbpchf = False
                price_bought_gbpchf = data['GBPCHF'].iloc[i]
        elif data['gbp'].iloc[i] > gbpchf_besttime and data['chf'].iloc[i] < -gbpchf_besttime and flag_sell_gbpchf:
            if flag_buy_gbpchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPCHF'].iloc[i],price_bought_gbpchf)
                list_backtest.append(balance_backtest)
                flag_buy_gbpchf = True
                price_bought_gbpchf = 0
                flag_sell_gbpchf = False
                price_sold_gbpchf = data['GBPCHF'].iloc[i]
            else:
                flag_sell_gbpchf = False
                price_sold_gbpchf = data['GBPCHF'].iloc[i]
        elif data['gbp'].iloc[i] < -gbpjpy_besttime and data['jpy'].iloc[i] > gbpjpy_besttime and flag_buy_gbpjpy:
            if flag_sell_gbpjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpjpy,data['GBPJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_gbpjpy = True
                price_sold_gbpjpy = 0
                flag_buy_gbpjpy = False
                price_bought_gbpjpy = data['GBPJPY'].iloc[i]
            else:
                flag_buy_gbpjpy = False
                price_bought_gbpjpy = data['GBPJPY'].iloc[i]
        elif data['gbp'].iloc[i] > gbpjpy_besttime and data['jpy'].iloc[i] < -gbpjpy_besttime and flag_sell_gbpjpy:
            if flag_buy_gbpjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPJPY'].iloc[i],price_bought_gbpjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_gbpjpy = True
                price_bought_gbpjpy = 0
                flag_sell_gbpjpy = False
                price_sold_gbpjpy = data['GBPJPY'].iloc[i]
            else:
                flag_sell_gbpjpy = False
                price_sold_gbpjpy = data['GBPJPY'].iloc[i]
        elif data['gbp'].iloc[i] < -gbpcad_besttime and data['cad'].iloc[i] > gbpcad_besttime and flag_buy_gbpcad:
            if flag_sell_gbpcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpcad,data['GBPCAD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_gbpcad = True
                price_sold_gbpcad = 0
                flag_buy_gbpcad = False
                price_bought_gbpcad = data['GBPCAD'].iloc[i]
            else:
                flag_buy_gbpcad = False
                price_bought_gbpcad = data['GBPCAD'].iloc[i]
        elif data['gbp'].iloc[i] > gbpcad_besttime and data['cad'].iloc[i] < -gbpcad_besttime and flag_sell_gbpcad:
            if flag_buy_gbpcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPCAD'].iloc[i],price_bought_gbpcad)
                list_backtest.append(balance_backtest)
                flag_buy_gbpcad = True
                price_bought_gbpcad = 0
                flag_sell_gbpcad = False
                price_sold_gbpcad = data['GBPCAD'].iloc[i]
            else:
                flag_sell_gbpcad = False
                price_sold_gbpcad = data['GBPCAD'].iloc[i]
        elif data['gbp'].iloc[i] < -gbpnzd_besttime and data['nzd'].iloc[i] > gbpnzd_besttime and flag_buy_gbpnzd:
            if flag_sell_gbpnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpnzd,data['GBPNZD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_gbpnzd = True
                price_sold_gbpnzd = 0
                flag_buy_gbpnzd = False
                price_bought_gbpnzd = data['GBPNZD'].iloc[i]
            else:
                flag_buy_gbpnzd = False
                price_bought_gbpnzd = data['GBPNZD'].iloc[i]
        elif data['gbp'].iloc[i] > gbpnzd_besttime and data['nzd'].iloc[i] < -gbpnzd_besttime and flag_sell_gbpnzd:
            if flag_buy_gbpnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPNZD'].iloc[i],price_bought_gbpnzd)
                list_backtest.append(balance_backtest)
                flag_buy_gbpnzd = True
                price_bought_gbpnzd = 0
                flag_sell_gbpnzd = False
                price_sold_gbpnzd = data['GBPNZD'].iloc[i]
            else:
                flag_sell_gbpnzd = False
                price_sold_gbpnzd = data['GBPNZD'].iloc[i]
        # JPY
        elif data['aud'].iloc[i] < -audjpy_besttime and data['jpy'].iloc[i] > audjpy_besttime and flag_buy_audjpy:
            if flag_sell_audjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audjpy,data['AUDJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_audjpy = True
                price_sold_audjpy = 0
                flag_buy_audjpy = False
                price_bought_audjpy = data['AUDJPY'].iloc[i]
            else:
                flag_buy_audjpy = False
                price_bought_audjpy = data['AUDJPY'].iloc[i]
        elif data['aud'].iloc[i] > audjpy_besttime and data['jpy'].iloc[i] < -audjpy_besttime and flag_sell_audjpy:
            if flag_buy_audjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDJPY'].iloc[i],price_bought_audjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_audjpy = True
                price_bought_audjpy = 0
                flag_sell_audjpy = False
                price_sold_audjpy = data['AUDJPY'].iloc[i]
            else:
                flag_sell_audjpy = False
                price_sold_audjpy = data['AUDJPY'].iloc[i]
        elif data['cad'].iloc[i] < -cadjpy_besttime and data['jpy'].iloc[i] > cadjpy_besttime and flag_buy_cadjpy:
            if flag_sell_cadjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_cadjpy,data['CADJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_cadjpy = True
                price_sold_cadjpy = 0
                flag_buy_cadjpy = False
                price_bought_cadjpy = data['CADJPY'].iloc[i]
            else:
                flag_buy_cadjpy = False
                price_bought_cadjpy = data['CADJPY'].iloc[i]
        elif data['cad'].iloc[i] > cadjpy_besttime and data['jpy'].iloc[i] < -cadjpy_besttime and flag_sell_cadjpy:
            if flag_buy_cadjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['CADJPY'].iloc[i],price_bought_cadjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_cadjpy = True
                price_bought_cadjpy = 0
                flag_sell_cadjpy = False
                price_sold_cadjpy = data['CADJPY'].iloc[i]
            else:
                flag_sell_cadjpy = False
                price_sold_cadjpy = data['CADJPY'].iloc[i]
        elif data['chf'].iloc[i] < -chfjpy_besttime and data['jpy'].iloc[i] > chfjpy_besttime and flag_buy_chfjpy:
            if flag_sell_chfjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_chfjpy,data['CHFJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_chfjpy = True
                price_sold_chfjpy = 0
                flag_buy_chfjpy = False
                price_bought_chfjpy = data['CHFJPY'].iloc[i]
            else:
                flag_buy_chfjpy = False
                price_bought_chfjpy = data['CHFJPY'].iloc[i]
        elif data['chf'].iloc[i] > chfjpy_besttime and data['jpy'].iloc[i] < -chfjpy_besttime and flag_sell_chfjpy:
            if flag_buy_chfjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['CHFJPY'].iloc[i],price_bought_chfjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_chfjpy = True
                price_bought_chfjpy = 0
                flag_sell_chfjpy = False
                price_sold_chfjpy = data['CHFJPY'].iloc[i]
            else:
                flag_sell_chfjpy = False
                price_sold_chfjpy = data['CHFJPY'].iloc[i]
        elif data['nzd'].iloc[i] < -nzdjpy_besttime and data['jpy'].iloc[i] > nzdjpy_besttime and flag_buy_nzdjpy:
            if flag_sell_nzdjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdjpy,data['NZDJPY'].iloc[i],jpy=True)
                list_backtest.append(balance_backtest)
                flag_sell_nzdjpy = True
                price_sold_nzdjpy = 0
                flag_buy_nzdjpy = False
                price_bought_nzdjpy = data['NZDJPY'].iloc[i]
            else:
                flag_buy_nzdjpy = False
                price_bought_nzdjpy = data['NZDJPY'].iloc[i]
        elif data['nzd'].iloc[i] > nzdjpy_besttime and data['jpy'].iloc[i] < -nzdjpy_besttime and flag_sell_nzdjpy:
            if flag_buy_nzdjpy == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDJPY'].iloc[i],price_bought_nzdjpy,jpy=True)
                list_backtest.append(balance_backtest)
                flag_buy_nzdjpy = True
                price_bought_nzdjpy = 0
                flag_sell_nzdjpy = False
                price_sold_nzdjpy = data['NZDJPY'].iloc[i]
            else:
                flag_sell_nzdjpy = False
                price_sold_nzdjpy = data['NZDJPY'].iloc[i]
        # CHF
        elif data['aud'].iloc[i] < -audchf_besttime and data['chf'].iloc[i] > audchf_besttime and flag_buy_audchf:
            if flag_sell_audchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audchf,data['AUDCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_audchf = True
                price_sold_audchf = 0
                flag_buy_audchf = False
                price_bought_audchf = data['AUDCHF'].iloc[i]
            else:
                flag_buy_audchf = False
                price_bought_audchf = data['AUDCHF'].iloc[i]
        elif data['aud'].iloc[i] > audchf_besttime and data['chf'].iloc[i] < -audchf_besttime and flag_sell_audchf:
            if flag_buy_audchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDCHF'].iloc[i],price_bought_audchf)
                list_backtest.append(balance_backtest)
                flag_buy_audchf = True
                price_bought_audchf = 0
                flag_sell_audchf = False
                price_sold_audchf = data['AUDCHF'].iloc[i]
            else:
                flag_sell_audchf = False
                price_sold_audchf = data['AUDCHF'].iloc[i]
        elif data['cad'].iloc[i] < -cadchf_besttime and data['chf'].iloc[i] > cadchf_besttime and flag_buy_cadchf:
            if flag_sell_cadchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_cadchf,data['CADCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_cadchf = True
                price_sold_cadchf = 0
                flag_buy_cadchf = False
                price_bought_cadchf = data['CADCHF'].iloc[i]
            else:
                flag_buy_cadchf = False
                price_bought_cadchf = data['CADCHF'].iloc[i]
        elif data['cad'].iloc[i] > cadchf_besttime and data['chf'].iloc[i] < -cadchf_besttime and flag_sell_cadchf:
            if flag_buy_audchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['CADCHF'].iloc[i],price_bought_cadchf)
                list_backtest.append(balance_backtest)
                flag_buy_cadchf = True
                price_bought_cadchf = 0
                flag_sell_cadchf = False
                price_sold_cadchf = data['CADCHF'].iloc[i]
            else:
                flag_sell_cadchf = False
                price_sold_cadchf = data['CADCHF'].iloc[i]
        elif data['nzd'].iloc[i] < -nzdchf_besttime and data['chf'].iloc[i] > nzdchf_besttime and flag_buy_nzdchf:
            if flag_sell_nzdchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdchf,data['NZDCHF'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_nzdchf = True
                price_sold_nzdchf = 0
                flag_buy_nzdchf = False
                price_bought_nzdchf = data['NZDCHF'].iloc[i]
            else:
                flag_buy_nzdchf = False
                price_bought_nzdchf = data['NZDCHF'].iloc[i]
        elif data['nzd'].iloc[i] > nzdchf_besttime and data['chf'].iloc[i] < -nzdchf_besttime and flag_sell_nzdchf:
            if flag_buy_nzdchf == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDCHF'].iloc[i],price_bought_nzdchf)
                list_backtest.append(balance_backtest)
                flag_buy_nzdchf = True
                price_bought_nzdchf = 0
                flag_sell_nzdchf = False
                price_sold_nzdchf = data['NZDCHF'].iloc[i]
            else:
                flag_sell_nzdchf = False
                price_sold_nzdchf = data['NZDCHF'].iloc[i]
        # NZD
        elif data['aud'].iloc[i] < -audnzd_besttime and data['nzd'].iloc[i] > audnzd_besttime and flag_buy_audnzd:
            if flag_sell_audnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audnzd,data['AUDNZD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_audnzd = True
                price_sold_audnzd = 0
                flag_buy_audnzd = False
                price_bought_audnzd = data['AUDNZD'].iloc[i]
            else:
                flag_buy_audnzd = False
                price_bought_audnzd = data['AUDNZD'].iloc[i]
        elif data['aud'].iloc[i] > audnzd_besttime and data['nzd'].iloc[i] < -audnzd_besttime and flag_sell_audnzd:
            if flag_buy_audnzd == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDNZD'].iloc[i],price_bought_audnzd)
                list_backtest.append(balance_backtest)
                flag_buy_audnzd = True
                price_bought_audnzd = 0
                flag_sell_audnzd = False
                price_sold_audnzd = data['AUDNZD'].iloc[i]
            else:
                flag_sell_audnzd= False
                price_sold_audnzd = data['AUDNZD'].iloc[i]
        elif data['nzd'].iloc[i] < -nzdcad_besttime and data['cad'].iloc[i] > nzdcad_besttime and flag_buy_nzdcad:
            if flag_sell_nzdcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdcad,data['NZDCAD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_nzdcad = True
                price_sold_nzdcad = 0
                flag_buy_nzdcad = False
                price_bought_nzdcad = data['NZDCAD'].iloc[i]
            else:
                flag_buy_nzdcad = False
                price_bought_nzdcad = data['NZDCAD'].iloc[i]
        elif data['nzd'].iloc[i] > nzdcad_besttime and data['cad'].iloc[i] < -nzdcad_besttime and flag_sell_nzdcad:
            if flag_buy_nzdcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDCAD'].iloc[i],price_bought_nzdcad)
                list_backtest.append(balance_backtest)
                flag_buy_nzdcad = True
                price_bought_nzdcad = 0
                flag_sell_nzdcad = False
                price_sold_nzdcad = data['NZDCAD'].iloc[i]
            else:
                flag_sell_nzdcad = False
                price_sold_nzdcad = data['NZDCAD'].iloc[i]
        # AUD
        elif data['aud'].iloc[i] < -audcad_besttime and data['cad'].iloc[i] > audcad_besttime and flag_buy_audcad:
            if flag_sell_audcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audcad,data['AUDCAD'].iloc[i])
                list_backtest.append(balance_backtest)
                flag_sell_audcad = True
                price_sold_audcad = 0
                flag_buy_audcad = False
                price_bought_audcad = data['AUDCAD'].iloc[i]
            else:
                flag_buy_audcad = False
                price_bought_audcad = data['AUDCAD'].iloc[i]
        elif data['aud'].iloc[i] > audcad_besttime and data['cad'].iloc[i] < -audcad_besttime and flag_sell_audcad:
            if flag_buy_audcad == False:
                balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDCAD'].iloc[i],price_bought_audcad)
                list_backtest.append(balance_backtest)
                flag_buy_audcad = True
                price_bought_audcad = 0
                flag_sell_audcad = False
                price_sold_audcad = data['AUDCAD'].iloc[i]
            else:
                flag_sell_audcad = False
                price_sold_audcad = data['AUDCAD'].iloc[i]

    return list_backtest
