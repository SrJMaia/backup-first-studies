def multi_backtest(initial,final):

    initial_balance = 1_000

    balance_bests_results = pd.DataFrame()

    for j in range(initial,final):

        clear_output(wait=True)
        print(f'{j}/{final-1}')

        risk = 0.01
        leverage = 100
        balance_backtest = 1_000
        list_backtest = [balance_backtest]

        # EUR
        eur_best_time = j
        flag_buy_eurusd, flag_sell_eurusd = True, True
        flag_buy_eurgbp, flag_sell_eurgbp = True, True
        flag_buy_eurchf, flag_sell_eurchf = True, True
        flag_buy_eurnzd, flag_sell_eurnzd = True, True
        flag_buy_euraud, flag_sell_euraud = True, True
        flag_buy_eurcad, flag_sell_eurcad = True, True
        flag_buy_eurjpy, flag_sell_eurjpy = True, True
        price_bought_eurusd, price_sold_eurusd = 0.0, 0.0
        price_bought_eurgbp, price_sold_eurgbp = 0.0, 0.0
        price_bought_eurchf, price_sold_eurchf = 0.0, 0.0
        price_bought_eurnzd, price_sold_eurnzd = 0.0, 0.0
        price_bought_euraud, price_sold_euraud = 0.0, 0.0
        price_bought_eurcad, price_sold_eurcad = 0.0, 0.0
        price_bought_eurjpy, price_sold_eurjpy = 0.0, 0.0

        # USD
        usd_best_time = j
        flag_buy_gbpusd, flag_sell_gbpusd = True, True
        flag_buy_usdchf, flag_sell_usdchf = True, True
        flag_buy_usdjpy, flag_sell_usdjpy = True, True
        flag_buy_audusd, flag_sell_audusd = True, True
        flag_buy_nzdusd, flag_sell_nzdusd = True, True
        flag_buy_usdcad, flag_sell_usdcad = True, True
        price_bought_gbpusd, price_sold_gbpusd = 0.0, 0.0
        price_bought_usdchf, price_sold_usdchf = 0.0, 0.0
        price_bought_usdjpy, price_sold_usdjpy = 0.0, 0.0
        price_bought_audusd, price_sold_audusd = 0.0, 0.0
        price_bought_nzdusd, price_sold_nzdusd = 0.0, 0.0
        price_bought_usdcad, price_sold_usdcad = 0.0, 0.0

        # GBP
        gbp_best_time = j
        flag_buy_gbpaud, flag_sell_gbpaud = True, True
        flag_buy_gbpchf, flag_sell_gbpchf = True, True
        flag_buy_gbpjpy, flag_sell_gbpjpy = True, True
        flag_buy_gbpcad, flag_sell_gbpcad = True, True
        flag_buy_gbpnzd, flag_sell_gbpnzd = True, True
        price_bought_gbpaud, price_sold_gbpaud = 0.0, 0.0
        price_bought_gbpchf, price_sold_gbpchf = 0.0, 0.0
        price_bought_gbpjpy, price_sold_gbpjpy = 0.0, 0.0
        price_bought_gbpcad, price_sold_gbpcad = 0.0, 0.0
        price_bought_gbpnzd, price_sold_gbpnzd = 0.0, 0.0

        # JPY
        jpy_best_time = j
        flag_buy_audjpy, flag_sell_audjpy = True, True
        flag_buy_cadjpy, flag_sell_cadjpy = True, True
        flag_buy_chfjpy, flag_sell_chfjpy = True, True
        flag_buy_nzdjpy, flag_sell_nzdjpy = True, True
        price_bought_audjpy, price_sold_audjpy = 0.0, 0.0
        price_bought_cadjpy, price_sold_cadjpy = 0.0, 0.0
        price_bought_chfjpy, price_sold_chfjpy = 0.0, 0.0
        price_bought_nzdjpy, price_sold_nzdjpy = 0.0, 0.0

        # CHF
        chf_besttime = j
        flag_buy_audchf, flag_sell_audchf = True, True
        flag_buy_cadchf, flag_sell_cadchf = True, True
        flag_buy_nzdchf, flag_sell_nzdchf = True, True
        price_bought_audchf, price_sold_audchf = 0.0, 0.0
        price_bought_cadchf, price_sold_cadchf = 0.0, 0.0
        price_bought_nzdchf, price_sold_nzdchf = 0.0, 0.0

        # NZD
        nzd_best_time = j
        flag_buy_audnzd, flag_sell_audnzd = True, True
        flag_buy_nzdcad, flag_sell_nzdcad = True, True
        price_bought_audnzd, price_sold_audnzd = 0.0, 0.0
        price_bought_nzdcad, price_sold_nzdcad = 0.0, 0.0

        # AUD
        aud_best_time = j
        flag_buy_audcad, flag_sell_audcad = True, True
        price_bought_audcad, price_sold_audcad = 0.0, 0.0

        for i in range(len(data)):
                    #EUR
            # EURUSD
            if data['eur'].iloc[i] < -eur_best_time and data['usd'].iloc[i] > eur_best_time and flag_buy_eurusd:
                if not flag_sell_eurusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurusd,data['EURUSD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_eurusd = data['EURUSD'].iloc[i]
                    price_sold_eurusd = 0
                    flag_sell_eurusd = True
                    flag_buy_eurusd = False
                else:
                    price_bought_eurusd = data['EURUSD'].iloc[i]
                    flag_buy_eurusd = False
            elif data['eur'].iloc[i] > eur_best_time and data['usd'].iloc[i] < -eur_best_time and flag_sell_eurusd:
                if not flag_buy_eurusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURUSD'].iloc[i],price_bought_eurusd)
                    list_backtest.append(balance_backtest)
                    price_sold_eurusd = data['EURUSD'].iloc[i]
                    price_bought_eurusd = 0
                    flag_buy_eurusd = True
                    flag_sell_eurusd = False
                else:
                    price_sold_eurusd = data['EURUSD'].iloc[i]
                    flag_sell_eurusd = False
            #EURGBP
            elif data['eur'].iloc[i] < -eur_best_time and data['gbp'].iloc[i] > eur_best_time and flag_buy_eurgbp:
                if not flag_sell_eurgbp:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurgbp,data['EURGBP'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_eurgbp = data['EURGBP'].iloc[i]
                    price_sold_eurgbp = 0
                    flag_sell_eurgbp = True
                    flag_buy_eurgbp = False
                else:
                    price_bought_eurgbp = data['EURGBP'].iloc[i]
                    flag_buy_eurgbp = False
            elif data['eur'].iloc[i] > eur_best_time and data['gbp'].iloc[i] < -eur_best_time and flag_sell_eurgbp:
                if not flag_buy_eurgbp:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURGBP'].iloc[i],price_bought_eurgbp)
                    list_backtest.append(balance_backtest)
                    price_sold_eurgbp = data['EURGBP'].iloc[i]
                    price_bought_eurgbp = 0
                    flag_buy_eurgbp = True
                    flag_sell_eurgbp = False
                else:
                    price_sold_eurgbp = data['EURGBP'].iloc[i]
                    flag_sell_eurgbp = False
            #EURCHF
            elif data['eur'].iloc[i] < -eur_best_time and data['chf'].iloc[i] > eur_best_time and flag_buy_eurchf:
                if not flag_sell_eurchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurchf,data['EURCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_eurchf = data['EURCHF'].iloc[i]
                    price_sold_eurchf = 0
                    flag_sell_eurchf = True
                    flag_buy_eurchf = False
                else:
                    price_bought_eurchf = data['EURCHF'].iloc[i]
                    flag_buy_eurchf = False
            elif data['eur'].iloc[i] > eur_best_time and data['chf'].iloc[i] < -eur_best_time and flag_sell_eurchf:
                if not flag_buy_eurchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURCHF'].iloc[i],price_bought_eurchf)
                    list_backtest.append(balance_backtest)
                    price_sold_eurchf = data['EURCHF'].iloc[i]
                    price_bought_eurchf = 0
                    flag_buy_eurchf = True
                    flag_sell_eurchf = False
                else:
                    price_sold_eurchf = data['EURCHF'].iloc[i]
                    flag_sell_eurchf = False
            #EURNZD
            elif data['eur'].iloc[i] < -eur_best_time and data['nzd'].iloc[i] > eur_best_time and flag_buy_eurnzd:
                if not flag_sell_eurnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurnzd,data['EURNZD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_eurnzd = data['EURNZD'].iloc[i]
                    price_sold_eurnzd = 0
                    flag_sell_eurnzd = True
                    flag_buy_eurnzd = False
                else:
                    price_bought_eurnzd = data['EURNZD'].iloc[i]
                    flag_buy_eurnzd = False
            elif data['eur'].iloc[i] > eur_best_time and data['nzd'].iloc[i] < -eur_best_time and flag_sell_eurnzd:
                if not flag_buy_eurnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURNZD'].iloc[i],price_bought_eurnzd)
                    list_backtest.append(balance_backtest)
                    price_sold_eurnzd = data['EURNZD'].iloc[i]
                    price_bought_eurnzd = 0
                    flag_buy_eurnzd = True
                    flag_sell_eurnzd = False
                else:
                    price_sold_eurnzd = data['EURNZD'].iloc[i]
                    flag_sell_eurnzd = False
            #EURAUD
            elif data['eur'].iloc[i] < -eur_best_time and data['aud'].iloc[i] > eur_best_time and flag_buy_euraud:
                if not flag_sell_euraud:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_euraud,data['EURAUD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_euraud = data['EURAUD'].iloc[i]
                    price_sold_euraud = 0
                    flag_sell_euraud = True
                    flag_buy_euraud = False
                else:
                    price_bought_euraud = data['EURAUD'].iloc[i]
                    flag_buy_euraud = False
            elif data['eur'].iloc[i] > eur_best_time and data['aud'].iloc[i] < -eur_best_time and flag_sell_euraud:
                if not flag_buy_euraud:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURAUD'].iloc[i],price_bought_euraud)
                    list_backtest.append(balance_backtest)
                    price_sold_euraud = data['EURAUD'].iloc[i]
                    price_bought_euraud = 0
                    flag_buy_euraud = True
                    flag_sell_euraud = False
                else:
                    price_sold_euraud = data['EURAUD'].iloc[i]
                    flag_sell_euraud = False
            #EURCAD
            elif data['eur'].iloc[i] < -eur_best_time and data['cad'].iloc[i] > eur_best_time and flag_buy_eurcad:
                if not flag_sell_eurcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurcad,data['EURCAD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_eurcad = data['EURCAD'].iloc[i]
                    price_sold_eurcad = 0
                    flag_sell_eurcad = True
                    flag_buy_eurcad = False
                else:
                    price_bought_eurcad = data['EURCAD'].iloc[i]
                    flag_buy_eurcad = False
            elif data['eur'].iloc[i] > eur_best_time and data['cad'].iloc[i] < -eur_best_time and flag_sell_eurcad:
                if not flag_buy_eurcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURCAD'].iloc[i],price_bought_eurcad)
                    list_backtest.append(balance_backtest)
                    price_sold_eurcad = data['EURCAD'].iloc[i]
                    price_bought_eurcad = 0
                    flag_buy_eurcad = True
                    flag_sell_eurcad = False
                else:
                    price_sold_eurcad = data['EURCAD'].iloc[i]
                    flag_sell_eurcad = False
            #EURJPY
            elif data['eur'].iloc[i] < -eur_best_time and data['jpy'].iloc[i] > eur_best_time and flag_buy_eurjpy:
                if not flag_sell_eurjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_eurjpy,data['EURJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_eurjpy = data['EURJPY'].iloc[i]
                    price_sold_eurjpy = 0
                    flag_sell_eurjpy = True
                    flag_buy_eurjpy = False
                else:
                    price_bought_eurjpy = data['EURJPY'].iloc[i]
                    flag_buy_eurjpy = False
            elif data['eur'].iloc[i] > eur_best_time and data['jpy'].iloc[i] < -eur_best_time and flag_sell_eurjpy:
                if not flag_buy_eurjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['EURJPY'].iloc[i],price_bought_eurjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_eurjpy = data['EURJPY'].iloc[i]
                    price_bought_eurjpy = 0
                    flag_buy_eurjpy = True
                    flag_sell_eurjpy = False
                else:
                    price_sold_eurjpy = data['EURJPY'].iloc[i]
                    flag_sell_eurjpy = False
                    # USD
           # GBPUSD
            elif data['gbp'].iloc[i] < -usd_best_time and data['usd'].iloc[i] > usd_best_time and flag_buy_gbpusd:
                if not flag_sell_gbpusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpusd,data['GBPUSD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_gbpusd = data['GBPUSD'].iloc[i]
                    price_sold_gbpusd = 0
                    flag_sell_gbpusd = True
                    flag_buy_gbpusd = False
                else:
                    price_bought_gbpusd = data['GBPUSD'].iloc[i]
                    flag_buy_gbpusd = False
            elif data['gbp'].iloc[i] > usd_best_time and data['usd'].iloc[i] < -usd_best_time and flag_sell_gbpusd:
                if not flag_buy_gbpusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPUSD'].iloc[i],price_bought_gbpusd)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpusd = data['GBPUSD'].iloc[i]
                    price_bought_gbpusd = 0
                    flag_buy_gbpusd = True
                    flag_sell_gbpusd = False
                else:
                    price_sold_gbpusd = data['GBPUSD'].iloc[i]
                    flag_sell_gbpusd = False
            # USDCHF
            elif data['usd'].iloc[i] < -usd_best_time and data['chf'].iloc[i] > usd_best_time and flag_buy_usdchf:
                if not flag_sell_usdchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdchf,data['USDCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_usdchf = data['USDCHF'].iloc[i]
                    price_sold_usdchf = 0
                    flag_sell_usdchf = True
                    flag_buy_usdchf = False
                else:
                    price_bought_usdchf = data['USDCHF'].iloc[i]
                    flag_buy_usdchf = False
            elif data['usd'].iloc[i] > usd_best_time and data['chf'].iloc[i] < -usd_best_time and flag_sell_usdchf:
                if not flag_buy_usdchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDCHF'].iloc[i],price_bought_usdchf)
                    list_backtest.append(balance_backtest)
                    price_sold_usdchf = data['USDCHF'].iloc[i]
                    price_bought_usdchf = 0
                    flag_buy_usdchf = True
                    flag_sell_usdchf = False
                else:
                    price_sold_usdchf = data['USDCHF'].iloc[i]
                    flag_sell_usdchf = False
            # USDJPY
            elif data['usd'].iloc[i] < -usd_best_time and data['jpy'].iloc[i] > usd_best_time and flag_buy_usdjpy:
                if not flag_sell_usdjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdjpy,data['USDJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_usdjpy = data['USDJPY'].iloc[i]
                    price_sold_usdjpy = 0
                    flag_sell_usdjpy = True
                    flag_buy_usdjpy = False
                else:
                    price_bought_usdjpy = data['USDJPY'].iloc[i]
                    flag_buy_usdjpy = False
            elif data['usd'].iloc[i] > usd_best_time and data['jpy'].iloc[i] < -usd_best_time and flag_sell_usdjpy:
                if not flag_buy_usdjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDJPY'].iloc[i],price_bought_usdjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_usdjpy = data['USDJPY'].iloc[i]
                    price_bought_usdjpy = 0
                    flag_buy_usdjpy = True
                    flag_sell_usdjpy = False
                else:
                    price_sold_usdjpy = data['USDJPY'].iloc[i]
                    flag_sell_usdjpy = False
            # AUDUSD
            elif data['aud'].iloc[i] < -usd_best_time and data['usd'].iloc[i] > usd_best_time and flag_buy_audusd:
                if not flag_sell_audusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audusd,data['AUDUSD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_audusd = data['AUDUSD'].iloc[i]
                    price_sold_audusd = 0
                    flag_sell_audusd = True
                    flag_buy_audusd = False
                else:
                    price_bought_audusd = data['AUDUSD'].iloc[i]
                    flag_buy_audusd = False
            elif data['aud'].iloc[i] > usd_best_time and data['usd'].iloc[i] < -usd_best_time and flag_sell_audusd:
                if not flag_buy_audusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDUSD'].iloc[i],price_bought_audusd)
                    list_backtest.append(balance_backtest)
                    price_sold_audusd = data['AUDUSD'].iloc[i]
                    price_bought_audusd = 0
                    flag_buy_audusd = True
                    flag_sell_audusd = False
                else:
                    price_sold_audusd = data['AUDUSD'].iloc[i]
                    flag_sell_audusd = False
            # NZDUSD
            elif data['nzd'].iloc[i] < -usd_best_time and data['usd'].iloc[i] > usd_best_time and flag_buy_nzdusd:
                if not flag_sell_nzdusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdusd,data['NZDUSD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_nzdusd = data['NZDUSD'].iloc[i]
                    price_sold_nzdusd = 0
                    flag_sell_nzdusd = True
                    flag_buy_nzdusd = False
                else:
                    price_bought_nzdusd = data['NZDUSD'].iloc[i]
                    flag_buy_nzdusd = False
            elif data['nzd'].iloc[i] > usd_best_time and data['usd'].iloc[i] < -usd_best_time and flag_sell_nzdusd:
                if not flag_buy_nzdusd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDUSD'].iloc[i],price_bought_nzdusd)
                    list_backtest.append(balance_backtest)
                    price_sold_nzdusd = data['NZDUSD'].iloc[i]
                    price_bought_nzdusd = 0
                    flag_buy_nzdusd = True
                    flag_sell_nzdusd = False
                else:
                    price_sold_nzdusd = data['NZDUSD'].iloc[i]
                    flag_sell_nzdusd = False
            # USDCAD
            elif data['usd'].iloc[i] < -usd_best_time and data['cad'].iloc[i] > usd_best_time and flag_buy_usdcad:
                if not flag_sell_usdcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_usdcad,data['USDCAD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_usdcad = data['USDCAD'].iloc[i]
                    price_sold_usdcad = 0
                    flag_sell_usdcad = True
                    flag_buy_usdcad = False
                else:
                    price_bought_usdcad = data['USDCAD'].iloc[i]
                    flag_buy_usdcad = False
            elif data['usd'].iloc[i] > usd_best_time and data['cad'].iloc[i] < -usd_best_time and flag_sell_usdcad:
                if not flag_buy_usdcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['USDCAD'].iloc[i],price_bought_usdcad)
                    list_backtest.append(balance_backtest)
                    price_sold_usdcad = data['USDCAD'].iloc[i]
                    price_bought_usdcad = 0
                    flag_buy_usdcad = True
                    flag_sell_usdcad = False
                else:
                    price_sold_usdcad = data['USDCAD'].iloc[i]
                    flag_sell_usdcad = False
                    # GBP
            # GBPAUD
            elif data['gbp'].iloc[i] < -gbp_best_time and data['aud'].iloc[i] > gbp_best_time and flag_buy_gbpaud:
                if not flag_sell_gbpaud:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpaud,data['GBPAUD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_gbpaud = data['GBPAUD'].iloc[i]
                    price_sold_gbpaud = 0
                    flag_sell_gbpaud = True
                    flag_buy_gbpaud = False
                else:
                    price_bought_gbpaud = data['GBPAUD'].iloc[i]
                    flag_buy_gbpaud = False
            elif data['gbp'].iloc[i] > gbp_best_time and data['aud'].iloc[i] < -gbp_best_time and flag_sell_gbpaud:
                if not flag_buy_gbpaud:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPAUD'].iloc[i],price_bought_gbpaud)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpaud = data['GBPAUD'].iloc[i]
                    price_bought_gbpaud = 0
                    flag_buy_gbpaud = True
                    flag_sell_gbpaud = False
                else:
                    price_sold_gbpaud = data['GBPAUD'].iloc[i]
                    flag_sell_gbpaud = False
            # GBPCHF
            elif data['gbp'].iloc[i] < -gbp_best_time and data['chf'].iloc[i] > gbp_best_time and flag_buy_gbpchf:
                if not flag_sell_gbpchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpchf,data['GBPCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_gbpchf = data['GBPCHF'].iloc[i]
                    price_sold_gbpchf = 0
                    flag_sell_gbpchf = True
                    flag_buy_gbpchf = False
                else:
                    price_bought_gbpchf = data['GBPCHF'].iloc[i]
                    flag_buy_gbpchf = False
            elif data['gbp'].iloc[i] > gbp_best_time and data['chf'].iloc[i] < -gbp_best_time and flag_sell_gbpchf:
                if not flag_buy_gbpchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPCHF'].iloc[i],price_bought_gbpchf)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpchf = data['GBPCHF'].iloc[i]
                    price_bought_gbpchf = 0
                    flag_buy_gbpchf = True
                    flag_sell_gbpchf = False
                else:
                    price_sold_gbpchf = data['GBPCHF'].iloc[i]
                    flag_sell_gbpchf = False
            # GBPJPY
            elif data['gbp'].iloc[i] < -gbp_best_time and data['jpy'].iloc[i] > gbp_best_time and flag_buy_gbpjpy:
                if not flag_sell_gbpjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpjpy,data['GBPJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_gbpjpy = data['GBPJPY'].iloc[i]
                    price_sold_gbpjpy = 0
                    flag_sell_gbpjpy = True
                    flag_buy_gbpjpy = False
                else:
                    price_bought_gbpjpy = data['GBPJPY'].iloc[i]
                    flag_buy_gbpjpy = False
            elif data['gbp'].iloc[i] > gbp_best_time and data['jpy'].iloc[i] < -gbp_best_time and flag_sell_gbpjpy:
                if not flag_buy_gbpjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPJPY'].iloc[i],price_bought_gbpjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpjpy = data['GBPJPY'].iloc[i]
                    price_bought_gbpjpy = 0
                    flag_buy_gbpjpy = True
                    flag_sell_gbpjpy = False
                else:
                    price_sold_gbpjpy = data['GBPJPY'].iloc[i]
                    flag_sell_gbpjpy = False
            # GBPCAD
            elif data['gbp'].iloc[i] < -gbp_best_time and data['cad'].iloc[i] > gbp_best_time and flag_buy_gbpcad:
                if not flag_sell_gbpcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpcad,data['GBPCAD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_gbpcad = data['GBPCAD'].iloc[i]
                    price_sold_gbpcad = 0
                    flag_sell_gbpcad = True
                    flag_buy_gbpcad = False
                else:
                    price_bought_gbpcad = data['GBPCAD'].iloc[i]
                    flag_buy_gbpcad = False
            elif data['gbp'].iloc[i] > gbp_best_time and data['cad'].iloc[i] < -gbp_best_time and flag_sell_gbpcad:
                if not flag_buy_gbpcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPCAD'].iloc[i],price_bought_gbpcad)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpcad = data['GBPCAD'].iloc[i]
                    price_bought_gbpcad = 0
                    flag_buy_gbpcad = True
                    flag_sell_gbpcad = False
                else:
                    price_sold_gbpcad = data['GBPCAD'].iloc[i]
                    flag_sell_gbpcad = False
            # GBPNZD
            elif data['gbp'].iloc[i] < -gbp_best_time and data['nzd'].iloc[i] > gbp_best_time and flag_buy_gbpnzd:
                if not flag_sell_gbpnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_gbpnzd,data['GBPNZD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_gbpnzd = data['GBPNZD'].iloc[i]
                    price_sold_gbpnzd = 0
                    flag_sell_gbpnzd = True
                    flag_buy_gbpnzd = False
                else:
                    price_bought_gbpnzd = data['GBPNZD'].iloc[i]
                    flag_buy_gbpnzd = False
            elif data['gbp'].iloc[i] > gbp_best_time and data['nzd'].iloc[i] < -gbp_best_time and flag_sell_gbpnzd:
                if not flag_buy_gbpnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['GBPNZD'].iloc[i],price_bought_gbpnzd)
                    list_backtest.append(balance_backtest)
                    price_sold_gbpnzd = data['GBPNZD'].iloc[i]
                    price_bought_gbpnzd = 0
                    flag_buy_gbpnzd = True
                    flag_sell_gbpnzd = False
                else:
                    price_sold_gbpnzd = data['GBPNZD'].iloc[i]
                    flag_sell_gbpnzd = False
                    # JPY
            # AUDJPY
            elif data['aud'].iloc[i] < -jpy_best_time and data['jpy'].iloc[i] > jpy_best_time and flag_buy_audjpy:
                if not flag_sell_audjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audjpy,data['AUDJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_audjpy = data['AUDJPY'].iloc[i]
                    price_sold_audjpy = 0
                    flag_sell_audjpy = True
                    flag_buy_audjpy = False
                else:
                    price_bought_audjpy = data['AUDJPY'].iloc[i]
                    flag_buy_audjpy = False
            elif data['aud'].iloc[i] > jpy_best_time and data['jpy'].iloc[i] < -jpy_best_time and flag_sell_audjpy:
                if not flag_buy_audjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDJPY'].iloc[i],price_bought_audjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_audjpy = data['AUDJPY'].iloc[i]
                    price_bought_audjpy = 0
                    flag_buy_audjpy = True
                    flag_sell_audjpy = False
                else:
                    price_sold_audjpy = data['AUDJPY'].iloc[i]
                    flag_sell_audjpy = False
            # CADJPY
            elif data['cad'].iloc[i] < -jpy_best_time and data['jpy'].iloc[i] > jpy_best_time and flag_buy_cadjpy:
                if not flag_sell_cadjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_cadjpy,data['CADJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_cadjpy = data['CADJPY'].iloc[i]
                    price_sold_cadjpy = 0
                    flag_sell_cadjpy = True
                    flag_buy_cadjpy = False
                else:
                    price_bought_cadjpy = data['CADJPY'].iloc[i]
                    flag_buy_cadjpy = False
            elif data['cad'].iloc[i] > jpy_best_time and data['jpy'].iloc[i] < -jpy_best_time and flag_sell_cadjpy:
                if not flag_buy_cadjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['CADJPY'].iloc[i],price_bought_cadjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_cadjpy = data['CADJPY'].iloc[i]
                    price_bought_cadjpy = 0
                    flag_buy_cadjpy = True
                    flag_sell_cadjpy = False
                else:
                    price_sold_cadjpy = data['CADJPY'].iloc[i]
                    flag_sell_cadjpy = False
            # CHFJPY
            elif data['chf'].iloc[i] < -jpy_best_time and data['jpy'].iloc[i] > jpy_best_time and flag_buy_chfjpy:
                if not flag_sell_chfjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_chfjpy,data['CHFJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_chfjpy = data['CHFJPY'].iloc[i]
                    price_sold_chfjpy = 0
                    flag_sell_chfjpy = True
                    flag_buy_chfjpy = False
                else:
                    price_bought_chfjpy = data['CHFJPY'].iloc[i]
                    flag_buy_chfjpy = False
            elif data['chf'].iloc[i] > jpy_best_time and data['jpy'].iloc[i] < -jpy_best_time and flag_sell_chfjpy:
                if not flag_buy_chfjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['CHFJPY'].iloc[i],price_bought_chfjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_chfjpy = data['CHFJPY'].iloc[i]
                    price_bought_chfjpy = 0
                    flag_buy_chfjpy = True
                    flag_sell_chfjpy = False
                    price_sold_chfjpy = data['CHFJPY'].iloc[i]
                else:
                    flag_sell_chfjpy = False
            # NZDJPY
            elif data['nzd'].iloc[i] < -jpy_best_time and data['jpy'].iloc[i] > jpy_best_time and flag_buy_nzdjpy:
                if not flag_sell_nzdjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdjpy,data['NZDJPY'].iloc[i],jpy=True)
                    list_backtest.append(balance_backtest)
                    price_bought_nzdjpy = data['NZDJPY'].iloc[i]
                    price_sold_nzdjpy = 0
                    flag_sell_nzdjpy = True
                    flag_buy_nzdjpy = False
                else:
                    price_bought_nzdjpy = data['NZDJPY'].iloc[i]
                    flag_buy_nzdjpy = False
            elif data['nzd'].iloc[i] > jpy_best_time and data['jpy'].iloc[i] < -jpy_best_time and flag_sell_nzdjpy:
                if not flag_buy_nzdjpy:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDJPY'].iloc[i],price_bought_nzdjpy,jpy=True)
                    list_backtest.append(balance_backtest)
                    price_sold_nzdjpy = data['NZDJPY'].iloc[i]
                    price_bought_nzdjpy = 0
                    flag_buy_nzdjpy = True
                    flag_sell_nzdjpy = False
                else:
                    price_sold_nzdjpy = data['NZDJPY'].iloc[i]
                    flag_sell_nzdjpy = False
                    # CHF
            # AUDCHF
            elif data['aud'].iloc[i] < -chf_besttime and data['chf'].iloc[i] > chf_besttime and flag_buy_audchf:
                if not flag_sell_audchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audchf,data['AUDCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_audchf = data['AUDCHF'].iloc[i]
                    price_sold_audchf = 0
                    flag_sell_audchf = True
                    flag_buy_audchf = False
                else:
                    price_bought_audchf = data['AUDCHF'].iloc[i]
                    flag_buy_audchf = False
            elif data['aud'].iloc[i] > chf_besttime and data['chf'].iloc[i] < -chf_besttime and flag_sell_audchf:
                if not flag_buy_audchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDCHF'].iloc[i],price_bought_audchf)
                    list_backtest.append(balance_backtest)
                    price_sold_audchf = data['AUDCHF'].iloc[i]
                    price_bought_audchf = 0
                    flag_buy_audchf = True
                    flag_sell_audchf = False
                else:
                    price_sold_audchf = data['AUDCHF'].iloc[i]
                    flag_sell_audchf = False
            # CADCHF
            elif data['cad'].iloc[i] < -chf_besttime and data['chf'].iloc[i] > chf_besttime and flag_buy_cadchf:
                if not flag_sell_cadchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_cadchf,data['CADCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_cadchf = data['CADCHF'].iloc[i]
                    price_sold_cadchf = 0
                    flag_sell_cadchf = True
                    flag_buy_cadchf = False
                else:
                    price_bought_cadchf = data['CADCHF'].iloc[i]
                    flag_buy_cadchf = False
            elif data['cad'].iloc[i] > chf_besttime and data['chf'].iloc[i] < -chf_besttime and flag_sell_cadchf:
                if not flag_buy_audchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['CADCHF'].iloc[i],price_bought_cadchf)
                    list_backtest.append(balance_backtest)
                    price_sold_cadchf = data['CADCHF'].iloc[i]
                    price_bought_cadchf = 0
                    flag_buy_cadchf = True
                    flag_sell_cadchf = False
                else:
                    price_sold_cadchf = data['CADCHF'].iloc[i]
                    flag_sell_cadchf = False
            # NZDCHF
            elif data['nzd'].iloc[i] < -chf_besttime and data['chf'].iloc[i] > chf_besttime and flag_buy_nzdchf:
                if not flag_sell_nzdchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdchf,data['NZDCHF'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_nzdchf = data['NZDCHF'].iloc[i]
                    price_sold_nzdchf = 0
                    flag_sell_nzdchf = True
                    flag_buy_nzdchf = False
                else:
                    price_bought_nzdchf = data['NZDCHF'].iloc[i]
                    flag_buy_nzdchf = False
            elif data['nzd'].iloc[i] > chf_besttime and data['chf'].iloc[i] < -chf_besttime and flag_sell_nzdchf:
                if not flag_buy_nzdchf:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDCHF'].iloc[i],price_bought_nzdchf)
                    list_backtest.append(balance_backtest)
                    price_sold_nzdchf = data['NZDCHF'].iloc[i]
                    price_bought_nzdchf = 0
                    flag_buy_nzdchf = True
                    flag_sell_nzdchf = False
                else:
                    price_sold_nzdchf = data['NZDCHF'].iloc[i]
                    flag_sell_nzdchf = False
                    # NZD
            # AUDNZD
            elif data['aud'].iloc[i] < -nzd_best_time and data['nzd'].iloc[i] > nzd_best_time and flag_buy_audnzd:
                if not flag_sell_audnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audnzd,data['AUDNZD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_audnzd = data['AUDNZD'].iloc[i]
                    price_sold_audnzd = 0
                    flag_sell_audnzd = True
                    flag_buy_audnzd = False
                else:
                    price_bought_audnzd = data['AUDNZD'].iloc[i]
                    flag_buy_audnzd = False
            elif data['aud'].iloc[i] > nzd_best_time and data['nzd'].iloc[i] < -nzd_best_time and flag_sell_audnzd:
                if not flag_buy_audnzd:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDNZD'].iloc[i],price_bought_audnzd)
                    list_backtest.append(balance_backtest)
                    price_sold_audnzd = data['AUDNZD'].iloc[i]
                    price_bought_audnzd = 0
                    flag_buy_audnzd = True
                    flag_sell_audnzd = False
                else:
                    price_sold_audnzd = data['AUDNZD'].iloc[i]
                    flag_sell_audnzd= False
            # NZDCAD
            elif data['nzd'].iloc[i] < -nzd_best_time and data['cad'].iloc[i] > nzd_best_time and flag_buy_nzdcad:
                if not flag_sell_nzdcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_nzdcad,data['NZDCAD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_nzdcad = data['NZDCAD'].iloc[i]
                    price_sold_nzdcad = 0
                    flag_sell_nzdcad = True
                    flag_buy_nzdcad = False
                else:
                    price_bought_nzdcad = data['NZDCAD'].iloc[i]
                    flag_buy_nzdcad = False
            elif data['nzd'].iloc[i] > nzd_best_time and data['cad'].iloc[i] < -nzd_best_time and flag_sell_nzdcad:
                if not flag_buy_nzdcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['NZDCAD'].iloc[i],price_bought_nzdcad)
                    list_backtest.append(balance_backtest)
                    price_sold_nzdcad = data['NZDCAD'].iloc[i]
                    price_bought_nzdcad = 0
                    flag_buy_nzdcad = True
                    flag_sell_nzdcad = False
                else:
                    price_sold_nzdcad = data['NZDCAD'].iloc[i]
                    flag_sell_nzdcad = False
                    # AUD
            # AUDCAD
            elif data['aud'].iloc[i] < -aud_best_time and data['cad'].iloc[i] > aud_best_time and flag_buy_audcad:
                if not flag_sell_audcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,price_sold_audcad,data['AUDCAD'].iloc[i])
                    list_backtest.append(balance_backtest)
                    price_bought_audcad = data['AUDCAD'].iloc[i]
                    price_sold_audcad = 0
                    flag_sell_audcad = True
                    flag_buy_audcad = False
                else:
                    price_bought_audcad = data['AUDCAD'].iloc[i]
                    flag_buy_audcad = False
            elif data['aud'].iloc[i] > aud_best_time and data['cad'].iloc[i] < -aud_best_time and flag_sell_audcad:
                if not flag_buy_audcad:
                    balance_backtest = account_balance(balance_backtest,risk,leverage,data['AUDCAD'].iloc[i],price_bought_audcad)
                    list_backtest.append(balance_backtest)
                    price_sold_audcad = data['AUDCAD'].iloc[i]
                    price_bought_audcad = 0
                    flag_buy_audcad = True
                    flag_sell_audcad = False
                else:
                    price_sold_audcad = data['AUDCAD'].iloc[i]
                    flag_sell_audcad = False

        if balance_backtest > initial_balance:
            balance_bests_results[j] = pd.Series(list_backtest)
        if j == tests-1:
            return balance_bests_results

        list_backtest.clear()
